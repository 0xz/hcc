1. Use the C Backend in a standalone Clang/LLVM checkout (untested for trunk!)

1.1.Get the required tools.
    See Getting Started with the LLVM System - Requirements.
    Note also that Python is needed for running the test suite. Get it at: http://www.python.org/download
1.2.Checkout LLVM:
    Change directory to where you want the llvm directory placed.
    svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
1.3.Checkout Clang:
    cd llvm/tools
    svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
1.4.Checkout Compiler-RT:
    cd ../.. (back to where you started)
    cd llvm/projects
    svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
1.5.Symbolic link the CBackend to the llvm/lib/Target/.
    ln -s $TOP/CBackend compiler/lib/Target/
1.6.Change llvm/lib/Target/LLVMBuild.txt.
    @@ -16,7 +16,7 @@
     ;===------------------------------------------------------------------------===;
     [common]
    -subdirectories = ARM CellSPU CppBackend Hexagon MBlaze MSP430 Mips PTX PowerPC Sparc X86 XCore
    +subdirectories = ARM CBackend CellSPU CppBackend Hexagon MBlaze MSP430 Mips PTX PowerPC Sparc X86 XCore
1.7.Configure clang using CMake, outside the source
    cd ../../ (back to where you started)
    mkdir build-debug
    cmake -DCMAKE_BUILD_TYPE=Debug -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=CBackend ../llvm
    make
1.8.Then you can use the CBackend.
    cd bin/
    gedit hello.c

      #include <stdio.h>
      int main()
      {
        printf("helloworld\n");
        return 0;
      }

    ./clang -S hello.c -o hello.ll -emit-llvm
    ./llc -march=c hello.ll -o hellotrans.c 

2. Use the C Backend in cppamp-driver project
Assuming $TOP is the directory of cppamp-driver checkout
2.1 Add CBackend to LLVM build system
    Repeat step 1.5-1.6 with the file being $TOP/compiler/lib/Target/LLVMBuild.txt
2.2 Build
    Mostly follow the build instruction in toplevel README.txt
      cmake -DCMAKE_BUILD_TYPE=Debug -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=CBackend <other options...>
