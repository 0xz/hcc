#!/bin/sh
patch -p0 < $0
exit 0
Index: compiler/include/llvm/Bitcode/LLVMBitCodes.h compiler/include/llvm/Bitcode/LLVMBitCodes.h
===================================================================
--- compiler/include/llvm/Bitcode/LLVMBitCodes.h
+++ compiler/include/llvm/Bitcode/LLVMBitCodes.h
@@ -375,7 +375,8 @@ namespace bitc {
     ATTR_KIND_IN_ALLOCA = 38,
     ATTR_KIND_NON_NULL = 39,
     ATTR_KIND_JUMP_TABLE = 40,
-    ATTR_KIND_DEREFERENCEABLE = 41
+    ATTR_KIND_DEREFERENCEABLE = 41,
+    ATTR_KIND_HC_GRID_LAUNCH = 42
   };
 
   enum ComdatSelectionKindCodes {
Index: compiler/include/llvm/IR/Attributes.h compiler/include/llvm/IR/Attributes.h
===================================================================
--- compiler/include/llvm/IR/Attributes.h
+++ compiler/include/llvm/IR/Attributes.h
@@ -73,6 +73,7 @@ public:
     ByVal,                 ///< Pass structure by value
     InAlloca,              ///< Pass structure in an alloca
     Cold,                  ///< Marks function as being in a cold path.
+    HCGridLaunch,            ///< Marks function as a grid_launch kernel.
     InlineHint,            ///< Source said inlining was desirable
     InReg,                 ///< Force argument to be passed in register
     JumpTable,             ///< Build jump-instruction tables and replace refs.
Index: compiler/compiler/lib/Bitcode/Reader/BitcodeReader.cpp compiler/lib/Bitcode/Reader/BitcodeReader.cpp
===================================================================
--- compiler/lib/Bitcode/Reader/BitcodeReader.cpp
+++ compiler/lib/Bitcode/Reader/BitcodeReader.cpp
@@ -556,6 +556,8 @@ static Attribute::AttrKind GetAttrFromCode(uint64_t Code) {
     return Attribute::Builtin;
   case bitc::ATTR_KIND_BY_VAL:
     return Attribute::ByVal;
+  case bitc::ATTR_KIND_HC_GRID_LAUNCH:
+    return Attribute::HCGridLaunch;
   case bitc::ATTR_KIND_IN_ALLOCA:
     return Attribute::InAlloca;
   case bitc::ATTR_KIND_COLD:
Index: compiler/lib/Bitcode/Writer/BitcodeWriter.cpp compiler/lib/Bitcode/Writer/BitcodeWriter.cpp
===================================================================
--- compiler/lib/Bitcode/Writer/BitcodeWriter.cpp
+++ compiler/lib/Bitcode/Writer/BitcodeWriter.cpp
@@ -169,6 +169,8 @@ static uint64_t getAttrKindEncoding(Attribute::AttrKind Kind) {
     return bitc::ATTR_KIND_BUILTIN;
   case Attribute::ByVal:
     return bitc::ATTR_KIND_BY_VAL;
+  case Attribute::HCGridLaunch:
+    return bitc::ATTR_KIND_HC_GRID_LAUNCH;
   case Attribute::InAlloca:
     return bitc::ATTR_KIND_IN_ALLOCA;
   case Attribute::Cold:
Index: compiler/lib/IR/Attributes.cpp compiler/lib/IR/Attributes.cpp
===================================================================
--- compiler/lib/IR/Attributes.cpp
+++ compiler/lib/IR/Attributes.cpp
@@ -181,6 +181,8 @@ std::string Attribute::getAsString(bool InAttrGrp) const {
     return "builtin";
   if (hasAttribute(Attribute::ByVal))
     return "byval";
+  if (hasAttribute(Attribute::HCGridLaunch))
+    return "hc_grid_launch";
   if (hasAttribute(Attribute::InAlloca))
     return "inalloca";
   if (hasAttribute(Attribute::InlineHint))
@@ -426,6 +428,7 @@ uint64_t AttributeImpl::getAttrMask(Attribute::AttrKind Val) {
   case Attribute::InAlloca:        return 1ULL << 43;
   case Attribute::NonNull:         return 1ULL << 44;
   case Attribute::JumpTable:       return 1ULL << 45;
+  case Attribute::HCGridLaunch:      return 1ULL << 46;
   case Attribute::Dereferenceable:
     llvm_unreachable("dereferenceable attribute not supported in raw format");
   }
Index: compiler/lib/IR/Verifier.cpp compiler/lib/IR/Verifier.cpp
===================================================================
--- compiler/lib/IR/Verifier.cpp
+++ compiler/lib/IR/Verifier.cpp
@@ -754,6 +754,7 @@ void Verifier::VerifyAttributeTypes(AttributeSet Attrs, unsigned Idx,
         I->getKindAsEnum() == Attribute::NoUnwind ||
         I->getKindAsEnum() == Attribute::NoInline ||
         I->getKindAsEnum() == Attribute::AlwaysInline ||
+        I->getKindAsEnum() == Attribute::HCGridLaunch ||
         I->getKindAsEnum() == Attribute::OptimizeForSize ||
         I->getKindAsEnum() == Attribute::StackProtect ||
         I->getKindAsEnum() == Attribute::StackProtectReq ||
Index: compiler/lib/AsmParser/LLLexer.cpp compiler/lib/AsmParser/LLLexer.cpp
===================================================================
--- compiler/lib/AsmParser/LLLexer.cpp
+++ compiler/lib/AsmParser/LLLexer.cpp
@@ -613,6 +613,7 @@ lltok::Kind LLLexer::LexIdentifier() {
   KEYWORD(inalloca);
   KEYWORD(cold);
   KEYWORD(dereferenceable);
+  KEYWORD(hc_grid_launch);
   KEYWORD(inlinehint);
   KEYWORD(inreg);
   KEYWORD(jumptable);
Index: compiler/lib/AsmParser/LLParser.cpp compiler/lib/AsmParser/LLParser.cpp
===================================================================
--- compiler/lib/AsmParser/LLParser.cpp
+++ compiler/lib/AsmParser/LLParser.cpp
@@ -1018,6 +1018,7 @@ bool LLParser::ParseFnAttributeValuePairs(AttrBuilder &B,
     case lltok::kw_alwaysinline:      B.addAttribute(Attribute::AlwaysInline); break;
     case lltok::kw_builtin:           B.addAttribute(Attribute::Builtin); break;
     case lltok::kw_cold:              B.addAttribute(Attribute::Cold); break;
+    case lltok::kw_hc_grid_launch:    B.addAttribute(Attribute::HCGridLaunch); break;
     case lltok::kw_inlinehint:        B.addAttribute(Attribute::InlineHint); break;
     case lltok::kw_jumptable:         B.addAttribute(Attribute::JumpTable); break;
     case lltok::kw_minsize:           B.addAttribute(Attribute::MinSize); break;
@@ -1318,6 +1319,7 @@ bool LLParser::ParseOptionalParamAttrs(AttrBuilder &B) {
     case lltok::kw_alignstack:
     case lltok::kw_alwaysinline:
     case lltok::kw_builtin:
+    case lltok::kw_hc_grid_launch:
     case lltok::kw_inlinehint:
     case lltok::kw_jumptable:
     case lltok::kw_minsize:
@@ -1387,6 +1389,7 @@ bool LLParser::ParseOptionalReturnAttrs(AttrBuilder &B) {
     case lltok::kw_alwaysinline:
     case lltok::kw_builtin:
     case lltok::kw_cold:
+    case lltok::kw_hc_grid_launch:
     case lltok::kw_inlinehint:
     case lltok::kw_jumptable:
     case lltok::kw_minsize:
Index: compiler/lib/AsmParser/LLToken.h compiler/lib/AsmParser/LLToken.h
===================================================================
--- compiler/lib/AsmParser/LLToken.h
+++ compiler/lib/AsmParser/LLToken.h
@@ -104,6 +104,7 @@ namespace lltok {
     kw_sanitize_address,
     kw_builtin,
     kw_byval,
+    kw_hc_grid_launch,
     kw_inalloca,
     kw_cold,
     kw_dereferenceable,
