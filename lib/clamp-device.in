#!/bin/bash
# wraps around commands to produce HSACO kernel
# $1 = input ll name
# $2 = HSACO kernel file name
# $3 = (optional) --amdgpu-target=(GPU family name)
#                          selects AMDGPU target

# enable bash debugging
KMDBSCRIPT="${KMDBSCRIPT:=0}"

# dump the LLVM bitcode
KMDUMPLLVM="${KMDUMPLLVM:=0}"

if [ $KMDBSCRIPT == "1" ]
then
  set -x
fi

# check command line arguments
if [ "$#" -lt 2 ]; then
  echo "Usage: $0 input_LLVM output_kernel (--amdgpu-target=(GPU family name)" >&2
  echo "  --amdgpu-target=(GPU family name)" >&2
  echo "           selects AMDGPU target" >&2
  exit 1
fi

if [ ! -f $1 ]; then
  echo "input LLVM IR $1 is not valid" >&2
  exit 1
fi

BINDIR=$(dirname $0)
EMBED=$BINDIR/clamp-embed
AS=$BINDIR/llvm-as
OPT=$BINDIR/opt
LLC=$BINDIR/llc
LINK=$BINDIR/llvm-link
LIB=$BINDIR/../lib
HSATOOLS=$BINDIR/clamp-hsatools

################
# AMDGPU target
################

AMDGPU_TARGET=@AMDGPU_TARGET@


ARGS="$@"
for ARG in $ARGS
do
  ######################
  # Parse AMDGPU target
  ######################
  case $ARG in
    --amdgpu-target=*)
    AMDGPU_TARGET="${ARG#*=}"
    continue
    ;;
  esac
done

# emit GCN ISA kernel
if [ $KMDUMPLLVM == "1" ]; then
  cp $1 ./dump.input.bc
fi

# UPGRADE_TBD: temporary suppress warning messages in Promote pass
if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
  $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -erase-nonkernels -promote-globals -dce -globaldce -S < $1 -o $2.promote.ll.orig
else
  $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -erase-nonkernels -promote-globals -tile-uniform -dce -globaldce -S < $1 -o $2.promote.ll.orig
fi

if [ $? == 1 ]; then
  echo "Generating AMD GCN kernel failed"
  exit 1
fi

# remove special section information for AMDGPU backend
$OPT -load $LIB/LLVMRemoveSpecialSection@CMAKE_SHARED_LIBRARY_SUFFIX@ \
     -remove-special-section -S < $2.promote.ll.orig -o $2.promote.ll.orig.new
if [ $? == 0 ]; then
  mv -f $2.promote.ll.orig.new $2.promote.ll.orig
fi

sed "s/addrspacecast /bitcast /g" < $2.promote.ll.orig > $2.promote.ll

if [ $KMDUMPLLVM == "1" ]; then
  cp $2.promote.ll ./dump.promote.ll
fi

$AS -o $2.promote.bc $2.promote.ll

$LINK $2.promote.bc -o $2 2>/dev/null

if [ $KMDUMPLLVM == "1" ]; then
  cp $2 ./dump.hsa_math_linked.bc
fi

if [ "$AMDGPU_TARGET" != "" ]; then
  $HSATOOLS $2 --amdgpu-target=$AMDGPU_TARGET
else
  $HSATOOLS $2
fi
RETVAL=$?
if [ $RETVAL == 0 ]; then
  mv -f $2 $2.orig
  mv $2.brig $2
  # remove temp file
  rm $2.promote.ll.orig $2.promote.ll $2.promote.bc
fi
exit $RETVAL
