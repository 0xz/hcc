#!/bin/bash
# wraps around commands to produce GPU kernel
# $1 = input ll name
# $2 = HSAIL/GCN kernel file name
# $3 = --hsa will trigger HSAIL/GCN lowering

# enable bash debugging
KMDBSCRIPT="${KMDBSCRIPT:=0}"

# dump the LLVM bitcode
KMDUMPLLVM="${KMDUMPLLVM:=0}"

if [ $KMDBSCRIPT == "1" ]
then
  set -x
fi

# check command line arguments
if [ "$#" -lt 3 ]; then
  echo "Usage: $0 input_LLVM output_kernel --hsa (--verbose)" >&2
  echo "  --hsa    will trigger HSAIL/GCN kernel output" >&2
  echo "  --verbose will enable GPU target lowering output" >&2
  exit 1
fi

if [ ! -f $1 ]; then
  echo "input LLVM IR $1 is not valid" >&2
  exit 1
fi

BINDIR=$(dirname $0)
EMBED=$BINDIR/clamp-embed
AS=$BINDIR/llvm-as
OPT=$BINDIR/opt
LLC=$BINDIR/llc
LINK=$BINDIR/llvm-link
MATHLIB=$BINDIR/../../lib
LIB=$BINDIR/../lib
HSATOOLS=$BINDIR/clamp-hsatools

################
# Verbose flag
################

VERBOSE=0

# set verbose flag
ARGS="$@"
for ARG in $ARGS
do
  if [ $ARG == "--verbose" ]; then
    VERBOSE=1
  fi
done

HSA_USE_AMDGPU_BACKEND=@HSA_USE_AMDGPU_BACKEND@

if [ $HSA_USE_AMDGPU_BACKEND == "ON" ]; then
  KM_USE_AMDGPU="${KM_USE_AMDGPU:=1}"
fi

# emit HSAIL/BRIG kernel
if [ "$3" == "--hsa" ]; then
    if [ $KMDUMPLLVM == "1" ]; then
      cp $1 ./dump.input.bc
    fi

    # UPGRADE_TBD: temporary suppress warning messages in Promote pass
    if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
      $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -promote-globals -erase-nonkernels -dce -globaldce -S < $1 -o $2.promote.ll.orig 2> /dev/null
    else
      $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -promote-globals -erase-nonkernels -tile-uniform -dce -globaldce -S < $1 -o $2.promote.ll.orig 2> /dev/null
    fi

    if [ $? == 1 ]; then
      echo "Generating HSAIL BRIG kernel failed"
      exit 1
    fi

    # remove special section information for AMDGPU backend
    if [ $KM_USE_AMDGPU ] ; then
      $OPT -load $LIB/LLVMRemoveSpecialSection@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -remove-special-section -S < $2.promote.ll.orig -o $2.promote.ll.orig.new
      if [ $? == 0 ]; then
        mv -f $2.promote.ll.orig.new $2.promote.ll.orig
      fi
    fi

    sed "s/call /call spir_func /g" < $2.promote.ll.orig | sed "s/addrspacecast /bitcast /g" > $2.promote.ll

    if [ $KMDUMPLLVM == "1" ]; then
      cp $2.promote.ll ./dump.promote.ll
    fi

    $AS -o $2.promote.bc $2.promote.ll

    if [ $VERBOSE == 1 ]; then
      echo "Generating HSA Brig kernel"
    fi
    #$LINK $MATHLIB/hsa_math.bc $2.promote.bc -o $2 2>/dev/null
    $LINK $2.promote.bc $MATHLIB/hsa_math.bc -o $2 2>/dev/null

    if [ $KMDUMPLLVM == "1" ]; then
      cp $2 ./dump.hsa_math_linked.bc
    fi

    $HSATOOLS $2
    RETVAL=$?
    if [ $RETVAL == 0 ]; then
      mv -f $2 $2.orig
      mv $2.brig $2
      # remove temp file
      rm $2.promote.ll.orig $2.promote.ll $2.promote.bc
    fi
    exit $RETVAL
fi
