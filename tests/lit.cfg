# -*- Python -*-

# Configuration file for the 'lit' test runner.
import os
import platform

# name: The name of this test suite.
config.name = 'CPPAMP'

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
config.test_format = lit.formats.ShTest(execute_external = True)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.cpp','.ll']

# test_source_root: The root path where tests are located.
config.test_src_root = os.path.dirname(os.path.realpath(__file__))

# target_triple: Used by ShTest and TclTest formats for XFAIL checks.
config.target_triple = 'foo-bar-zen'

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)


###
# Check that the site specific configuration exists.
#site_cfg = os.path.join(config.test_source_root, 'lit.site.cfg')
#if not os.path.exists(site_cfg):
#  lit.fatal('No site specific configuration available!')

# Discover the 'clang' and 'clangcc' to use.

def inferClang(PATH):
    # Determine which clang to use.
    clang = os.getenv('CLANG')

    # If the user set clang in the environment, definitely use that and don't
    # try to validate.
    if clang:
        return clang

    # Otherwise look in the path.
    clang = lit.util.which('clang', PATH)

    if not clang:
        lit.fatal("couldn't find 'clang' program, try setting "
                  "CLANG in your environment")

    return clang

cxx_options = ' ' + ' '.join([
  "-I%s/include" % config.project_src_dir,
  "-I%s/include" % config.libcxx_src_dir,
  "-I%s" % config.gtest_src_dir,
  "-I%s" % config.opencl_inc_dir,
  "-I%s/src/include" % config.gmac_dir,
  "-DGTEST_HAS_TR1_TUPLE=0",
  "-stdlib=libc++",
]) + ' '

link_options = ' ' + ' '.join([
  "-L%s" % config.libcxx_lib_dir,
  "-L%s" % config.libcxxrt_lib_dir,
  "-L%s" % config.opencl_lib_dir,
  "-L%s" % config.gmac_dir,
  "-L%s" % config.mcwamp_lib_dir,
  "-lgmac-cl",
  "-lmcwamp",
  "-lOpenCL",
  "-lcxxrt",
  "-ldl",
  "-lpthread"
]) + ' '

gtest_link_options = ' ' + ' '.join([
  "-lmcwamp_gtest",
]) + ' '

config.environment['LD_LIBRARY_PATH'] = ':'.join([ \
  config.libcxx_lib_dir,
  config.libcxxrt_lib_dir,
  config.gmac_dir,
]) + ":" + config.environment['LD_LIBRARY_PATH']

config.clang = inferClang(config.llvm_tools_dir)
config.clang_cc1 = config.clang + "++"
config.clang_cxx11  = config.clang_cc1 + cxx_options + "-std=c++11"
config.clang_cxxamp = config.clang_cc1 + cxx_options + "-std=c++amp"
config.clang_cxxamp_device = config.clang_cc1 + " -cc1 -std=c++amp -fcuda-is-device"
config.clang_gtest_amp = config.clang_cxxamp + link_options + gtest_link_options

if not lit.quiet:
    lit.note('using clang: %r' % config.clang)

config.substitutions.append( ('%link', link_options) )
config.substitutions.append( ('%cxx11', config.clang_cxx11) )
config.substitutions.append( ('%cxxamp', config.clang_cxxamp) )
config.substitutions.append( ('%amp_device', config.clang_cxxamp_device) )
config.substitutions.append( ('%gtest_amp', config.clang_gtest_amp) )
config.substitutions.append( ('%FileCheck', os.path.join(config.llvm_tools_dir,'FileCheck') ) )
config.substitutions.append( ('%llc', os.path.join(config.llvm_tools_dir,'llc') ) )
config.substitutions.append( ('%llvm-as', os.path.join(config.llvm_tools_dir, 'llvm-as') ) )
config.substitutions.append( ('%clang', config.clang) )
config.substitutions.append( ('%axtor', os.path.join(config.executable_output_path, 'axtor') ) )
