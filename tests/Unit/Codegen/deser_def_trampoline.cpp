// RUN: %amp_device -c -D__GPU__=1 -S -emit-llvm %s -o -|c++filt|%FileCheck %s
// RUN: %amp_device -c -D__GPU__=1 %s -o %t.device.o
// RUN: %gtest_amp %s %t.device.o -o %t && %t
#include "amp.h"
#ifndef __GPU__
#include "gtest/gtest.h"
#endif
int aa;
float bb;
extern "C" int get_global_id(int) {return 0;}
class base{
 public:
  __attribute__((annotate("deserialize"))) /* For compiler */
  base(int a_,float b_) restrict(amp) :a(a_), b(b_) { aa = a_; bb = b_; }
  int a;
  float b;
};
class baz {
 public:
#if 0 // This declaration is supposed to be generated
  __attribute__((annotate("deserialize"))) /* For compiler */
  baz(base&, int foo) restrict(amp);
#endif
  void operator()(Concurrency::index<1> idx) restrict(amp) {};

  base &B;
  int bar;
};
__attribute__((noinline))
void trampoline(void) restrict(amp) {
  baz::__cxxamp_trampoline(1, 2.0f, 3);
}
#ifndef __GPU__
TEST(GPUCodeGen, ConstructorWithReference) {
  trampoline();
  EXPECT_EQ(aa, 1.0);
  EXPECT_EQ(bb, 2.0f);
}
#endif
// The definition should be generated by clang
// CHECK: define {{.*}}void @baz::__cxxamp_trampoline
// and metadata
// CHECK: !0 = metadata !{void (i32, float, i32)* @baz::__cxxamp_trampoline(int, float, int)}
