//===----------------------------------------------------------------------===//
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

#pragma once
#include <cassert>
#include <future>
#include <utility>
#include <coordinate>
#include <iostream>

#include <kalmar_launch.h>
#include <kalmar_runtime.h>

namespace std {
namespace experimental {
namespace parallel {
inline namespace v1 {

template<typename Kernel, typename InputIterator>
class fe_wrapper
{
public:
  explicit fe_wrapper(size_t ext, const Kernel f, const InputIterator& first) restrict(amp,cpu)
      : _ext(ext), k(f), _first(first) {}
  void operator() (std::offset<1> idx) restrict(amp,cpu) {
#ifdef __KALMAR_ACCELERATOR__
      k(*(_first + idx[0]));
#endif
  }
private:
  const size_t _ext;
  const Kernel k;
  const InputIterator& _first;
};

// for_each
template <typename ExecutionPolicy,
          typename InputIterator, typename Function>
__attribute__((noinline,used))
void for_each(ExecutionPolicy&& exec,
              InputIterator first, InputIterator last,
              Function f) restrict(cpu,amp) {
#ifndef __KALMAR_ACCELERATOR__
  size_t ext = std::distance(first, last);
  fe_wrapper<Function, InputIterator> _pf(ext, f, first);
  Kalmar::mcw_cxxamp_launch_kernel<fe_wrapper<Function, InputIterator>, 1>(Kalmar::getContext()->getDevice(L"default")->get_default_queue(), &ext, NULL, _pf);
#else //ifndef __KALMAR_ACCELERATOR__
  //to ensure functor has right operator() defined
  //this triggers the trampoline code being emitted
  auto bar = &fe_wrapper<Function, InputIterator>::operator();
  auto qq = &std::offset<1>::__cxxamp_opencl_index;
  int* foo = reinterpret_cast<int*>(&fe_wrapper<Function, InputIterator>::__cxxamp_trampoline);
#endif
}

// for_each_n
template <typename ExecutionPolicy,
          typename InputIterator, typename Size, typename Function>
__attribute__((noinline,used))
void for_each_n(ExecutionPolicy&& exec,
                InputIterator first, Size n,
                Function f) restrict(cpu,amp) {
#ifndef __KALMAR_ACCELERATOR__
  size_t ext = std::distance(first, first + n);
  fe_wrapper<Function, InputIterator> _pf(ext, f, first);
  Kalmar::mcw_cxxamp_launch_kernel<fe_wrapper<Function, InputIterator>, 1>(Kalmar::getContext()->getDevice(L"default")->get_default_queue(), &ext, NULL, _pf);
#else //ifndef __KALMAR_ACCELERATOR__
  //to ensure functor has right operator() defined
  //this triggers the trampoline code being emitted
  auto bar = &fe_wrapper<Function, InputIterator>::operator();
  auto qq = &std::offset<1>::__cxxamp_opencl_index;
  int* foo = reinterpret_cast<int*>(&fe_wrapper<Function, InputIterator>::__cxxamp_trampoline);
#endif
}

} // inline namespace v1
} // namespace parallel
} // namespace experimental 
} // namespace std
